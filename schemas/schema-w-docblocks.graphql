schema {
  query: Query
  mutation: Mutation
}
"Gets all available channels"
type Query {
  channels: [ChannelType]

  """
  Gets a channel with the specified ID.
  """
  channel(
    """
    The channel ID
    """
    channelId: String
  ): ChannelType

  """
  Gets all products according to the values provided.
  """
  products(
    """
    The amount of products to skip. Default maximum value is 6000
    """
    skip: Int

    """
    The amount of products to take. Default maximum value is 200
    """
    take: Int

    """
    When specified, only include products associated with that brand
    """
    brandAlias: String

    """
    When specified, only include products associated with that category
    """
    categoryAlias: String

    """
    When specified, only include products associated with that discount campaign
    """
    discountCampaignAlias: String

    """
    Get products associated with the specified URL
    """
    url: String

    """
    Additional filter parameters
    """
    filter: FilterInputType

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): ProductsResultType

  """
  Gets a product with the specified ID.
  """
  product(
    """
    The product alias
    """
    alias: String

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): ProductType

  """
  Gets related products for the specified alias.
  """
  relatedProducts(
    """
    The product alias
    """
    alias: String!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): [RelatedProductType]

  """
  Gets a category with the specified ID.
  """
  category(
    """
    The product alias
    """
    alias: String

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): CategoryType

  """
  Get all categories.
  """
  categories(
    """
    Decides if hidden categories should be returned
    """
    includeHidden: Boolean

    """
    When set only categories with a matching parentId will be returned. Specify '0' to only select the root level.
    """
    parentCategoryId: Int

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): [CategoryType]

  """
  Get all brands.
  """
  brands(
    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): [BrandListType]

  """
  Get the cart
  """
  getCart(
    """
    Specify the ID of an existing cart
    """
    id: String

    """
    Decides if a completed cart can be returned
    """
    includeCompleted: Boolean

    """
    If the the shipping fee on cart is allowed to take the value of an external shipping. Set to false if outside checkout.
    """
    allowExternalShippingFee: Boolean

    """
    Set to true to force a refresh of all product data. This will remove products that are inactive or out of stock.
    """
    forceRefresh: Boolean

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): CartType

  """
  Gets html snippet for the specified external order. If the order was recently completed, the html snippet will contain the "Thank you"-content.
  """
  getCheckout(
    """
    The external order id.
    """
    id: String!

    """
    The payment type for the checkout.
    """
    paymentType: PaymentType!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): String @deprecated(reason: "Use Checkout instead")

  """
  Gets html snippet and checkout order data for the specified external order. If the order was recently completed, the html snippet will contain the "Thank you"-content.
  """
  getCheckoutAndOrder(
    """
    The external order id.
    """
    id: String!

    """
    The payment used for the checkout.
    """
    paymentType: PaymentType!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): CheckoutAndOrderType @deprecated(reason: "Use Checkout instead")

  """
  Gets checkout data with a html snippet, checkout order data for the specified order and the User. If the order was recently completed, the html snippet will contain the "Thank you"-content.
  """
  checkout(
    """
    The external order id.
    """
    id: String!

    """
    optional cartId.
    """
    cartId: String

    """
    The payment used for the checkout.
    """
    paymentType: PaymentType!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): CheckoutDataType

  """
  Gets information about the specified list page.
  """
  listPageInfo(
    """
    Page alias
    """
    alias: String

    """
    Path to list page. e.g. /c/category-1
    """
    url: String

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): PageInfoType

  """
  Gets all CMS pages.
  """
  cmsPages(
    """
    Only CMS pages with these tags will be included. Null or empty will fetch all pages.
    """
    includeTags: [String]

    """
    CMS pages with these tags will not be included in the result.
    """
    excludeTags: [String]

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): [PageWidgetPageType]

  """
  Gets the page area and widgets from the specifed family.
  """
  widgetArea(
    """
    Widget alias
    """
    alias: String

    """
    Widget family
    """
    family: String

    """
    Widget area
    """
    areaName: String

    """
    Widget display setting
    """
    displaySetting: String

    """
    Filter by customer type. (Only for anonymous users)
    """
    customerType: CustomerType

    """
    Widget preview option. (only for authorized users)
    """
    preview: Boolean

    """
    Path to widget
    """
    url: String

    """
    Widget filter options
    """
    filters: [PageWidgetCollectionFilterInputType]

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): PageWidgetCollectionType

  """
  Get orders for the current user
  """
  getOrders(
    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): [OrderType]

  """
  Get a specific order with details
  """
  getOrder(
    #
    orderId: Int!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): OrderType

  """
  Get a specific order with details via public id
  """
  getOrderPublic(
    #
    publicOrderId: Guid!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): OrderType

  """
  Get the current user
  """
  getUser(
    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): UserType

  """
  Gets an alternate url for a given url.
  """
  urlHistory(
    #
    url: String

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): UrlHistoryType

  """
  Get a menu
  """
  getMenuAtLocation(
    """
    Specify the ID of a menu location
    """
    menuLocationId: String

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): MenuType

  """
  Gets all products reviews to the values provided.
  """
  reviews(
    """
    Product alias
    """
    alias: String

    """
    The amount of products to skip
    """
    skip: Int

    """
    The amount of products to take
    """
    take: Int

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): ProductReviewResultType
  validateOrderCreation(
    """
    The cart ID
    """
    cartId: String!

    """
    The choices made in checkout
    """
    checkout: CheckoutInputType!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): ValidateOrderCreationResponseType
}

"""
Type containing all information about the channel-type
"""
type ChannelType {
  """
  ID
  """
  id: String!

  """
  Name
  """
  name: String!

  """
  Type
  """
  type: String!

  """
  Base URL
  """
  url: String!

  """
  Default language ID used if no other is specified, or an invalid is supplied.
  """
  defaultLanguageId: String!
  languages: [LanguageType]

  """
  Default market ID used if no other is specified, or an invalid is supplied.
  """
  defaultMarketId: String!
  markets: [MarketType]
}

"""
Type containing all information about the language-type
"""
type LanguageType {
  """
  Language ID
  """
  id: String!

  """
  Language name
  """
  name: String!

  """
  Two-letter ISO code
  """
  code: String!
}

"""
Type containing all information about the market-type
"""
type MarketType {
  """
  ID
  """
  id: String!

  """
  Default language ID used if no other is specified, or an invalid is supplied.
  """
  defaultLanguageId: String!

  """
  If true, indicates that the market is virtual. Virtual markets cannot be used in the checkout process
  """
  virtual: Boolean

  """
  Indicates if the market should only be displayed in the checkout process.
  """
  onlyDisplayInCheckout: Boolean

  """
  Group key used to group related markets together, i.e. if they belong to the same region or continent.
  """
  groupKey: String!

  """
  The part of the market id that is used in the url.
  """
  alias: String
  allowedLanguages: [LanguageType]

  """
  Country
  """
  country: CountryType

  """
  Currency
  """
  currency: CurrencyType
}

"""
Type containing all information about the country-type
"""
type CountryType {
  """
  Name
  """
  name: String!

  """
  Two-letter ISO code
  """
  code: String!
}

"""
Type containing all information about the currency-type
"""
type CurrencyType {
  """
  Name
  """
  name: String!

  """
  Currency symbol
  """
  symbol: String!

  """
  Currency code
  """
  code: String!

  """
  Currency rate used to convert from this currency to default currency
  """
  rate: Decimal!
}

scalar Decimal

"""
The results of the products-query.
"""
type ProductsResultType {
  """
  The total count of results for the query
  """
  count: Long!

  """
  Results returned by the query
  """
  products: [ProductType]

  """
  The filters available for this query
  """
  filters: FilterCollectionType
}

scalar Long

"""
Type containing all information about a product
"""
type ProductType {
  """
  Product ID
  """
  productId: Int!

  """
  The product name
  """
  name: String

  """
  Alias for the product
  """
  alias: String!

  """
  The product article number
  """
  articleNumber: String

  """
  The primary category ID
  """
  categoryId: Int!

  """
  The full path to the product
  """
  canonicalUrl: String

  """
  Alternative full paths to the product
  """
  alternativeCanonicalUrls: [String] @deprecated(reason: "Use AlternativeUrls instead.")

  """
  Alternative urls to the product
  """
  alternativeUrls: [AlternativeUrlType]

  """
  The date on which the product was first available (yyyy-mm-dd)
  """
  firstAvailableOn: String

  """
  Product text info
  """
  texts: ProductTextsType

  """
  The product type. Either 'product' or 'package'
  """
  type: String

  """
  Product SKUs
  """
  skus: [SkuType]

  """
  Product brand information
  """
  brand: BrandType

  """
  Product category information
  """
  categories: [CategoryType]

  """
  Product price information
  """
  unitPrice: PriceType

  """
  Lowest price and comparison price according to EU price laws
  """
  lowestPrice: LowestPriceType

  """
  List of product images
  """
  images: [String] @deprecated(reason: "Use ProductType.ProductImages instead.")

  """
  List of product images and their related properties
  """
  productImages: [ProductImageType]

  """
  Product parameter groups
  """
  parameterGroups: [ParameterGroupType]

  """
  Variant dimensions
  """
  variantDimensions: [VariantDimensionType]

  """
  Product variant group
  """
  variantGroup: VariantGroupType

  """
  Product rating
  """
  rating: RatingType

  """
  Product stock information
  """
  totalStock: StockType

  """
  Product metadata
  """
  meta: MetadataType

  """
  Primary category for this product
  """
  primaryCategory: CategoryType

  """
  The current variant selection
  """
  currentProductVariant: VariantType

  """
  Breadcrumbs
  """
  breadcrumbs: [BreadcrumbType]

  """
  Product discount campaigns
  """
  discountCampaigns: [CampaignRuleType]

  """
  Price log with the prices from the last 30 days
  """
  priceLog: [PriceLogItemType]

  """
  Type of discount price: None, Sale or Campaign
  """
  discountType: DiscountType

  """
  Package specific information for this product
  """
  productPackage: ProductPackageType

  """
  The dimensions of the Product. Note that this can also be set on SKU level
  """
  dimensions: DimensionsType

  """
  Weight in grams (g). Note that this can also be set on SKU level
  """
  weight: Int!

  """
  The Freightclass set for this product
  """
  freightClass: String

  """
  The Supplier Id
  """
  supplierId: Int!
}

"""
Type containing information about alternative urls to an entity
"""
type AlternativeUrlType {
  """
  Alternative url
  """
  url: String!

  """
  The culture of the alternative url
  """
  culture: String!

  """
  The language code of the alternative url
  """
  language: String!

  """
  The country code of the alternative url
  """
  country: String

  """
  The id of the channel that the alternative url exists on
  """
  channelId: String!
}

"""
Product info
"""
type ProductTextsType {
  """
  Main product info
  """
  text1: String

  """
  Secondary product info
  """
  text2: String

  """
  Tertiary product info
  """
  text3: String
}

"""
Type containing all information about a product SKU
"""
type SkuType {
  """
  ID of the SKU
  """
  skuId: Int!

  """
  The associated product ID
  """
  productId: Int!

  """
  The article number of the SKU
  """
  articleNumber: String!

  """
  SKU name
  """
  name: String

  """
  External ID of the SKU
  """
  externalId: String

  """
  SKU GTIN
  """
  gtin: String

  """
  Stock information
  """
  stock: StockType

  """
  The dimensions of the SKU
  """
  dimensions: DimensionsType

  """
  Shelf
  """
  shelf: String

  """
  Incoming date
  """
  incoming: DateTime

  """
  Weight in grams (g)
  """
  weight: Int!
}

"""
Type containing information about SKU stock
"""
type StockType {
  """
  The total units available
  """
  totalStock: Int!

  """
  The units available at this moment
  """
  inStock: Int!

  """
  Over-sellable units
  """
  oversellable: Int!

  """
  Amount of units that are always available
  """
  static: Int

  """
  Incoming date
  """
  incoming: DateTime @deprecated(reason: "Use SkuType.Incoming or VariantType.Incoming instead")

  """
  Shelf
  """
  shelf: String @deprecated(reason: "Use SkuType.Shelf or VariantType.Shelf instead")
}

"""
The `DateTime` scalar type represents a date and time. `DateTime` expects timestamps to be formatted in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar DateTime

"""
SKU dimensions
"""
type DimensionsType {
  """
  Length
  """
  length: Int!

  """
  Width
  """
  width: Int!

  """
  Height
  """
  height: Int!
}

"""
Type containing brand information
"""
type BrandType {
  """
  Brand ID
  """
  brandId: Int!

  """
  Brand alias
  """
  alias: String

  """
  The full path for this brand. e.g. '/l/brand-1'
  """
  canonicalUrl: String

  """
  Alternative full paths to the brand
  """
  alternativeCanonicalUrls: [String] @deprecated(reason: "Use AlternativeUrls instead.")

  """
  Alternative urls to the brand
  """
  alternativeUrls: [AlternativeUrlType]

  """
  Brand name
  """
  name: String

  """
  Brand description
  """
  description: String
}

"""
Type containing category information
"""
type CategoryType {
  """
  Category ID
  """
  categoryId: Int!

  """
  Parent category ID
  """
  parentCategoryId: Int!

  """
  Category display order
  """
  order: Int!

  """
  Category alias
  """
  alias: String

  """
  The full path to the category. e.g. '/l/category-1'
  """
  canonicalUrl: String!

  """
  Alternative full paths to the category
  """
  alternativeCanonicalUrls: [String] @deprecated(reason: "Use AlternativeUrls instead.")

  """
  Alternative urls to the category
  """
  alternativeUrls: [AlternativeUrlType]

  """
  Category name
  """
  name: String!

  """
  Category description
  """
  description: String

  """
  Category secondary description
  """
  secondaryDescription: String

  """
  Category is hidden
  """
  isHidden: Boolean

  """
  Google taxonomy data for this category
  """
  googleTaxonomy: GoogleTaxonomyType

  """
  Primary image
  """
  primaryImage: String

  """
  Background image
  """
  backgroundImage: String
}

"""
Type containing Google taxonomy data
"""
type GoogleTaxonomyType {
  """
  Google taxonomy ID
  """
  id: Int

  """
  Parent Google taxonomy ID
  """
  parentId: Int

  """
  Google taxonomy name
  """
  name: String

  """
  Google taxonomy path
  """
  path: String
}

"""
Type containing price information
"""
type PriceType {
  """
  The selling price including VAT
  """
  sellingPriceIncVat: Decimal!

  """
  The selling price excluding VAT
  """
  sellingPriceExVat: Decimal!

  """
  The regular price including VAT
  """
  regularPriceIncVat: Decimal!

  """
  The regular price excluding VAT
  """
  regularPriceExVat: Decimal!

  """
  Discount amount including VAT
  """
  discountIncVat: Decimal!

  """
  Discount amount excluding VAT
  """
  discountExVat: Decimal!

  """
  Discount percentage
  """
  discountPercentage: Int!

  """
  VAT amount
  """
  vat: Decimal!

  """
  Whether the price is discounted or not
  """
  isDiscounted: Boolean!

  """
  Selling price (incl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  sellingPriceIncVatFormatted: String

  """
  Selling price (excl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  sellingPriceExVatFormatted: String

  """
  Regular price (incl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  regularPriceIncVatFormatted: String

  """
  Regular price (excl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  regularPriceExVatFormatted: String

  """
  Discount (incl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  discountIncVatFormatted: String

  """
  Discount (excl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  discountExVatFormatted: String

  """
  VAT amount, formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  vatFormatted: String
}

"""
Type containing information about the lowest price during last 30 days and the legal comparison price (EU). Observe that discount is calculated against comparison price and not the regular price.
"""
type LowestPriceType {
  """
  The selling price including VAT
  """
  sellingPriceIncVat: Decimal!

  """
  The selling price excluding VAT
  """
  sellingPriceExVat: Decimal!

  """
  The comparison price including VAT
  """
  comparisonPriceIncVat: Decimal!

  """
  The comparison price excluding VAT
  """
  comparisonPriceExVat: Decimal!

  """
  The lowest price including VAT
  """
  lowestPriceIncVat: Decimal!

  """
  The lowest price excluding VAT
  """
  lowestPriceExVat: Decimal!

  """
  Discount amount including VAT.
  """
  discountIncVat: Decimal!

  """
  Discount amount excluding VAT.
  """
  discountExVat: Decimal!

  """
  Discount percentage.
  """
  discountPercentage: Int!

  """
  VAT amount
  """
  vat: Decimal!

  """
  Whether the price is discounted or not
  """
  isDiscounted: Boolean!

  """
  Selling price (incl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  sellingPriceIncVatFormatted: String

  """
  Selling price (excl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  sellingPriceExVatFormatted: String

  """
  Comparison price (incl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  comparisonPriceIncVatFormatted: String

  """
  Comparison price (excl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  comparisonPriceExVatFormatted: String

  """
  Lowest price (incl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  lowestPriceIncVatFormatted: String

  """
  Lowest price (excl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  lowestPriceExVatFormatted: String

  """
  Discount (incl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  discountIncVatFormatted: String

  """
  Discount (excl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  discountExVatFormatted: String

  """
  VAT amount, formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  vatFormatted: String
}

"""
Type containing all information about a product image
"""
type ProductImageType {
  """
  The file name of the product image.
  """
  fileName: String!

  """
  Custom tags associated with the product image.
  """
  tags: [String]
}

"""
Type containing product parameter group information
"""
type ParameterGroupType {
  """
  Parameter group ID
  """
  parameterGroupId: Int

  """
  Product ID associated with this parameter group
  """
  productId: Int!

  """
  The parameter group name
  """
  name: String!

  """
  List of parameters
  """
  parameters: [ParameterType]
}

"""
Type containing parameter information
"""
type ParameterType {
  """
  Parameter ID
  """
  parameterId: Int!

  """
  ID of the associated parameter group
  """
  parameterGroupId: Int!

  """
  The parameter type
  """
  type: String

  """
  Parameter name
  """
  name: String

  """
  Parameter label
  """
  label: String

  """
  Parameter description
  """
  description: String

  """
  Parameter value
  """
  value: String

  """
  Whether this parameter should be shown within the product specifications
  """
  show: Boolean!

  """
  Whether this parameter should be shown within filter options
  """
  showFilter: Boolean!

  """
  The internal identifier of the parameter. This value is the same for all languages and does not change if the parameter name changes.
  """
  identifier: String

  """
  The ID of the associated facet
  """
  facetId: String
}

"""
Type containing variant dimension information
"""
type VariantDimensionType {
  """
  The level of this variant dimension
  """
  level: Int!

  """
  The dimension name
  """
  dimension: String!

  """
  Dimension type. e.g. 'product' if it leads to a different product, otherwise 'selection'
  """
  type: String!

  """
  Dimension value
  """
  value: String

  """
  Dimension label
  """
  label: String

  """
  Dimension attributes
  """
  attributes: [VariantAttributeType]

  """
  Group values
  """
  group: [VariantValueType]
}

"""
Type containing variant attribute information
"""
type VariantAttributeType {
  """
  Attribute key
  """
  key: String!

  """
  Attribute value
  """
  value: String!
}

"""
Type containing variant value information
"""
type VariantValueType {
  """
  Label
  """
  label: String!

  """
  Value
  """
  value: String!
}

"""
Type containing variant group information
"""
type VariantGroupType {
  """
  Variant group ID
  """
  variantGroupId: Int!

  """
  Variant group name
  """
  name: String!

  """
  ID of the main product in this group
  """
  mainProductId: Int!

  """
  If true, only the main product will show up in product lists
  """
  collapseInLists: Boolean!

  """
  The amount of active products in this variant group
  """
  activeProducts: Int!

  """
  Group variants
  """
  variants: [VariantType]
}

"""
Type containing variant information
"""
type VariantType {
  """
  Level of this variant. Lower value is a more accurate selection
  """
  level: Int!

  """
  Variant dimension
  """
  dimension: String!

  """
  Variant type. In order of accuracy 'sku', 'product', 'selection'
  """
  type: String!

  """
  Variant value
  """
  value: String

  """
  Variant label
  """
  label: String

  """
  SKU ID associated with this variant
  """
  skuId: Int

  """
  Incoming date
  """
  incoming: DateTime

  """
  Shelf
  """
  shelf: String

  """
  Stock information for variant
  """
  stock: StockType

  """
  Product ID associated with this variant
  """
  productId: Int!

  """
  Variant name
  """
  name: String

  """
  Alias for variant selection. e.g. 'product-4'
  """
  alias: String

  """
  Canonical URL. Only available for the 'product'-level
  """
  canonicalUrl: String

  """
  The primary image used for the product. Only available for the 'product'-level
  """
  primaryImage: String

  """
  Variant attributes
  """
  attributes: [VariantAttributeType]

  """
  List of variants for this variant
  """
  variants: [VariantType]
}

"""
Type containing product rating information
"""
type RatingType {
  """
  Rating score
  """
  score: Decimal!

  """
  Vote count
  """
  voteCount: Int!
}

"""
Type containing metadata
"""
type MetadataType {
  """
  Title
  """
  title: String

  """
  Description
  """
  description: String

  """
  Keywords
  """
  keywords: String
}

"""
Type containing breadcrumb information
"""
type BreadcrumbType {
  """
  Category ID
  """
  categoryId: Int!

  """
  Parent category ID
  """
  parentCategoryId: Int!

  """
  Breadcrumb path
  """
  url: String

  """
  Breadcrumb display name
  """
  name: String!
}

"""
Type containing campaign rule information
"""
type CampaignRuleType {
  """
  Campaign ID
  """
  campaignId: String!

  """
  Campaign name
  """
  name: String

  """
  Whether to hide the campaign title
  """
  hideTitle: Boolean

  """
  Campaign rule type
  """
  ruleType: String

  """
  Campaign category
  """
  category: String

  """
  Campaign action
  """
  action: String

  """
  Campaign action value
  """
  actionValue: String

  """
  The url to this campaign, if any
  """
  canonicalUrl: String
}

"""
Type containing all information about a product price log item
"""
type PriceLogItemType {
  """
  The selling price including VAT
  """
  sellingPriceIncVat: Decimal!

  """
  The selling price excluding VAT
  """
  sellingPriceExVat: Decimal!

  """
  The regular price including VAT
  """
  regularPriceIncVat: Decimal!

  """
  The regular price excluding VAT
  """
  regularPriceExVat: Decimal!

  """
  Discount amount including VAT
  """
  discountIncVat: Decimal!

  """
  Discount amount excluding VAT
  """
  discountExVat: Decimal!

  """
  Discount percentage
  """
  discountPercentage: Int!

  """
  VAT amount
  """
  vat: Decimal!

  """
  Whether the price is discounted or not
  """
  isDiscounted: Boolean!

  """
  True if this log items has the lowest price for the last 30 days
  """
  isLowest: Boolean!

  """
  Date of the price change
  """
  date: String!

  """
  Selling price (incl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  sellingPriceIncVatFormatted: String

  """
  Selling price (excl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  sellingPriceExVatFormatted: String

  """
  Regular price (incl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  regularPriceIncVatFormatted: String

  """
  Regular price (excl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  regularPriceExVatFormatted: String

  """
  Discount (incl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  discountIncVatFormatted: String

  """
  Discount (excl. VAT), formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  discountExVatFormatted: String

  """
  VAT amount, formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  vatFormatted: String
}

enum DiscountType {
  NONE
  SALE_PRICE
  PRICE_CAMPAIGN
}

"""
Type containing type specific information for a product of the type 'package'
"""
type ProductPackageType {
  """
  Groups in this package
  """
  groups: [GroupType]
}

"""
Type containing information for a group in a product package
"""
type GroupType {
  """
  The package group id
  """
  groupId: Int!

  """
  The package group name
  """
  name: String

  """
  The package group description
  """
  description: String

  """
  The package group image
  """
  image: String

  """
  'true' if this package group is required in order to place the package in cart
  """
  required: Boolean!

  """
  The sort order of this package group relative to other groups
  """
  sortOrder: Int!

  """
  Options in this package group
  """
  options: [OptionType]
}

"""
Type containing information for an option in a product package group
"""
type OptionType {
  """
  The option id
  """
  optionId: Int!

  """
  The quantity of items that is chosen if this option is selected
  """
  quantity: Int!

  """
  'true' if this option should be selected by default
  """
  isSelected: Boolean!

  """
  The sort order of this option relative to other options
  """
  sortOrder: Int!

  """
  The product that this options refers to
  """
  product: ProductType
}

"""
Type containing collection of filters
"""
type FilterCollectionType {
  """
  The lowest / highest price found in the results
  """
  price: PriceFilterType

  """
  The collection of facet values returned from the query
  """
  facets: [FilterType]
}

"""
Price range filter
"""
type PriceFilterType {
  """
  The lowest price found in the results
  """
  lowest: Float!

  """
  The highest price found in the results
  """
  highest: Float!
}

"""
Filter group
"""
type FilterType {
  """
  ID for this filter type
  """
  filterId: String!

  """
  Filter type. e.g. 'Parameter', 'Category', 'Sku'
  """
  type: String

  """
  Parameter group name
  """
  group: String

  """
  Parameter group display name
  """
  label: String

  """
  Collection of facet values in this group
  """
  values: [FilterValueType]
}

"""
Filter value
"""
type FilterValueType {
  """
  FacetId_Count
  """
  _id: String!

  """
  Facet ID. Use this in the Facets-list in the products-query to retrieve products associated with it
  """
  facetId: String

  """
  Parent ID. Only available for category-facets.0
  """
  parentId: String

  """
  Facet display name
  """
  label: String

  """
  The path associated with this facet. e.g. '/c/category-1'
  """
  url: String

  """
  The display order of this facet
  """
  order: Int!

  """
  The amount of products in the results associated with this facet
  """
  count: Long!

  """
  If the filter for this facet is hidden
  """
  hidden: Boolean!
}

"""
Filter options
"""
input FilterInputType {
  """
  Search text to filter by
  """
  searchText: String

  """
  A list of string values, that when specified will only include products associated with those values
  """
  facets: [String]

  """
  A list of string values, that when specified will exclude products that are associated with one of the facets
  """
  excludeFacets: [String]

  """
  A list of string values, that when specified will only include products associated with those values
  """
  include: [String]

  """
  A list of string values, that when specified will exclude products that are associated with one of the facets
  """
  exclude: [String]

  """
  Use this to sort the results in a particular way
  """
  sort: SortType

  """
  Price filter
  """
  price: PriceFilterInputType

  """
  Filter mode
  """
  filterMode: FilterMode

  """
  A list of product ids to filter on
  """
  productIds: [Int]

  """
  Include collapsed products
  """
  includeCollapsed: Boolean
}

"""
Sort types
"""
enum SortType {
  """
  No sorting
  """
  NONE

  """
  Sort by price
  """
  PRICE

  """
  Sort by price, in descending order
  """
  PRICE_DESC

  """
  Sort by most sold
  """
  MOST_SOLD

  """
  Sort by votes
  """
  VOTES

  """
  Sort by brand
  """
  BRAND

  """
  Sort by latest products
  """
  LATEST

  """
  Sort by relevance
  """
  RELEVANCE

  """
  Sort by facets
  """
  FACET_ORDER

  """
  Sort by alphabetical
  """
  ALPHABETICAL

  """
  Sort by alphabetical, in descending order
  """
  ALPHABETICAL_DESC

  """
  Sort by custom value 1
  """
  CUSTOM_1

  """
  Sort by custom value 2
  """
  CUSTOM_2

  """
  Sort by custom value 3
  """
  CUSTOM_3

  """
  Sort by custom value 4
  """
  CUSTOM_4

  """
  Sort by custom value 5
  """
  CUSTOM_5

  """
  Sort by available stock balance
  """
  AVAILABLE_STOCK

  """
  Sort by available stock balance, in descending order
  """
  AVAILABLE_STOCK_DESC

  """
  Sort by total stock balance, including oversellable
  """
  TOTAL_STOCK

  """
  Sort by total stock balance, including oversellable, in descending order
  """
  TOTAL_STOCK_DESC
}

"""
Price range filter
"""
input PriceFilterInputType {
  """
  The lowest price you want to include
  """
  lowest: Float

  """
  The highest price you want to include
  """
  highest: Float
}

"""
Filter mode
"""
enum FilterMode {
  """
  Get the counts for the results, including the ones excluded by the groups
  """
  BY_GROUP

  """
  Get the counts for the current filter results
  """
  CURRENT
}

"""
Type containing a subset of product information for related products
"""
type RelatedProductType {
  """
  Product alias
  """
  alias: String!

  """
  Product name
  """
  name: String

  """
  Full path to the product
  """
  canonicalUrl: String

  """
  Product brand information
  """
  brand: BrandType

  """
  Product price
  """
  unitPrice: PriceType

  """
  Relation type
  """
  relation: ProductRelation @deprecated(reason: "Use RelatedProductType.RelationType instead.")

  """
  Relation type
  """
  relationType: String!

  """
  Product primary image
  """
  primaryImage: String

  """
  Product secondary image
  """
  secondaryImage: String

  """
  List of product images
  """
  images: [String] @deprecated(reason: "Use RelatedProductType.ProductImages instead.")

  """
  List of product images and their related properties
  """
  productImages: [ProductImageType]

  """
  Product SKUs
  """
  skus: [SkuType]

  """
  Product campaigns
  """
  discountCampaigns: [CampaignRuleType]

  """
  Primary category for this product
  """
  primaryCategory: CategoryType

  """
  Product parameter groups. The availability of data in this field needs to be configured.
  """
  parameterGroups: [ParameterGroupType]
}

"""
Product relation type
"""
enum ProductRelation {
  """
  Product is related to this product
  """
  RELATED

  """
  Product is an accessory to this product
  """
  ACCESSORIES

  """
  Product is similar to this product
  """
  SIMILAR
}

"""
Type containing brand listing information
"""
type BrandListType {
  """
  Brand ID
  """
  brandId: Int!

  """
  Brand alias
  """
  alias: String

  """
  The full path for this brand. e.g. '/l/brand-1'
  """
  canonicalUrl: String

  """
  Alternative full paths to the brand
  """
  alternativeCanonicalUrls: [String] @deprecated(reason: "Use AlternativeUrls instead.")

  """
  Alternative urls to the brand
  """
  alternativeUrls: [AlternativeUrlType]

  """
  Brand name
  """
  name: String

  """
  Brand description
  """
  description: String

  """
  Secondary description
  """
  secondaryDescription: String

  """
  Primary image
  """
  primaryImage: String

  """
  Background image
  """
  backgroundImage: String

  """
  Brand logo
  """
  logo: String
}

"""
Type containing cart information
"""
type CartType {
  """
  The cart ID
  """
  id: String

  """
  The cart items
  """
  items: [CartItemType]

  """
  If true, the cart can not be modified further
  """
  isCompleted: Boolean!

  """
  Cart promo code
  """
  promoCode: String

  """
  Whether the cart has free shipping
  """
  freeShipping: Boolean!

  """
  Cart fixed discount
  """
  fixedDiscount: Decimal!

  """
  Campaigns applied to this cart
  """
  appliedCampaigns: [CampaignRuleType]

  """
  The cart summary
  """
  summary: CartSummaryType
}

"""
Type containing cart item information
"""
type CartItemType {
  """
  Product
  """
  product: ProductType

  """
  SKU Id
  """
  skuId: Int!

  """
  Cart item Id
  """
  id: ID!

  """
  Total price
  """
  totalPrice: PriceType

  """
  Price per unit
  """
  unitPrice: PriceType

  """
  Quantity
  """
  quantity: Int!

  """
  Campaign
  """
  campaign: CampaignType

  """
  The key of the group that this cart item belong to
  """
  groupKey: ID

  """
  Contains package meta data if the cart item was part of package
  """
  productPackage: ProductPackageCartItemType

  """
  Custom message
  """
  message: String
}

"""
Type containing campaign information
"""
type CampaignType {
  """
  Applied campaigns
  """
  appliedCampaigns: [CampaignRuleType]

  """
  Campaign prices
  """
  prices: [CampaignPriceType]
}

"""
Type containing campaign price information
"""
type CampaignPriceType {
  """
  Campaign price quantity
  """
  quantity: Int!

  """
  Campaign price discount
  """
  discount: Decimal!

  """
  Campaign price discount percentage
  """
  discountPercentage: Decimal!

  """
  Campaign price
  """
  price: PriceType
}

"""
Type containing meta data for the package selection that a cart item was added from
"""
type ProductPackageCartItemType {
  """
  The package id
  """
  packageId: Int!

  """
  The package name
  """
  packageName: String!

  """
  The group id
  """
  groupId: Int!

  """
  The option id
  """
  optionId: Int!
}

"""
Type containing cart summary information
"""
type CartSummaryType {
  """
  Cart total
  """
  total: PriceType

  """
  Cart sub-total
  """
  subTotal: PriceType

  """
  Cart VAT information
  """
  vats: [VatGroupType]

  """
  Cart fee information
  """
  fees: CartFeesType

  """
  Account balance information
  """
  balance: BalanceType

  """
  Cart fixed discount amount incl. VAT
  """
  fixedAmountDiscountIncVat: Decimal!

  """
  Cart fixed discount amount excl. VAT
  """
  fixedAmountDiscountExVat: Decimal!

  """
  Cart shipping option information
  """
  shipping: ShippingOptionType

  """
  Cart payment option information
  """
  payment: PaymentOptionType
}

"""
Type containing VAT group information
"""
type VatGroupType {
  """
  VAT rate
  """
  rate: Int!

  """
  VAT amount
  """
  amount: Decimal!
}

"""
Type containing information about cart fees
"""
type CartFeesType {
  """
  Payment fee incl. VAT
  """
  paymentFeeIncVat: Decimal!

  """
  Payment fee excl. VAT
  """
  paymentFeeExVat: Decimal!

  """
  Shipping fee incl. VAT
  """
  shippingFeeIncVat: Decimal!

  """
  Shipping fee excl. VAT
  """
  shippingFeeExVat: Decimal!
}

"""
Type containing account balance information
"""
type BalanceType {
  """
  The remaining account balance
  """
  remaining: Decimal!

  """
  The amount that will be used for this order
  """
  pending: Decimal!

  """
  The cart total selling price incl. VAT if balance hadn't been withdrawn .
  """
  totalSellingPriceExBalanceIncVat: Decimal!

  """
  The cart total selling price excl. VAT if balance hadn't been withdrawn.
  """
  totalSellingPriceExBalanceExVat: Decimal!

  """
  Remaining account balance, formatted as a currency string
  """
  remainingFormatted: String

  """
  Pending balance, formatted as a currency string
  """
  pendingFormatted: String

  """
  Cart total incl. VAT, excl. balance, formatted as a currency string
  """
  totalSellingPriceExBalanceIncVatFormatted: String

  """
  Cart total excl. VAT, excl. balance, formatted as a currency string
  """
  totalSellingPriceExBalanceExVatFormatted: String
}

"""
Type containing shipping option information
"""
type ShippingOptionType {
  """
  Shipping option ID
  """
  id: Int!

  """
  Name
  """
  name: String

  """
  Display name
  """
  displayName: String

  """
  Fee incl. VAT
  """
  feeIncVat: Decimal!

  """
  Fee excl. VAT
  """
  feeExVat: Decimal!

  """
  Whether this shipping option is the default selection
  """
  isDefault: Boolean!

  """
  Whether this option is the one selected
  """
  isSelected: Boolean!

  """
  External ID
  """
  externalId: String

  """
  Shipping data
  """
  shippingData: String

  """
  Amount left to recieve free shipping
  """
  amountLeftToFreeShipping: Decimal!

  """
  Shipping option logo
  """
  logo: String

  """
  Sub-options
  """
  subOptions: [ShippingOptionType]

  """
  Amount left to recieve free shipping formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  amountLeftToFreeShippingFormatted: String

  """
  Fee incl. VAT, formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  feeIncVatFormatted: String

  """
  Fee excl. VAT, formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  feeExVatFormatted: String
}

"""
Type containing payment option information
"""
type PaymentOptionType {
  """
  Payment option ID
  """
  id: Int!

  """
  Name
  """
  name: String

  """
  Display name
  """
  displayName: String

  """
  Shipping option logo
  """
  logo: String

  """
  Fee incl. VAT
  """
  feeIncVat: Decimal!

  """
  Fee excl. VAT
  """
  feeExVat: Decimal!

  """
  Whether this payment option is the default selection
  """
  isDefault: Boolean!

  """
  Whether this option is the one selected
  """
  isSelected: Boolean!

  """
  Payment type
  """
  paymentType: PaymentType

  """
  Payment option data
  """
  paymentData: String

  """
  Whether it is a new checkout session
  """
  newCheckoutSession: Boolean!

  """
  Fee incl. VAT, formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  feeIncVatFormatted: String

  """
  Fee excl. VAT, formatted with currency info. e.g. '299 kr', '123,45 SEK', '$12.34'
  """
  feeExVatFormatted: String
}

"""
Payment types
"""
enum PaymentType {
  """
  Standard
  """
  STANDARD

  """
  Klarna
  """
  KLARNA

  """
  Svea
  """
  SVEA

  """
  Walley
  """
  WALLEY

  """
  Avarda
  """
  AVARDA
}

type CheckoutAndOrderType {
  """
  HTML-snippet
  """
  htmlSnippet: String!

  """
  Order details
  """
  order: CheckoutOrderType
}

type CheckoutOrderType {
  """
  Order ID
  """
  orderId: String

  """
  Transaction ID
  """
  transactionId: String

  """
  Secondary transaction ID
  """
  secondaryTransactionId: String

  """
  First name
  """
  firstName: String

  """
  Last name
  """
  lastName: String

  """
  Zip code
  """
  zip: String

  """
  E-mail
  """
  email: String

  """
  Order message
  """
  message: String

  """
  Currency
  """
  currency: String

  """
  Campaign IDs
  """
  campaignIds: [String]

  """
  Campaign names
  """
  campaignNames: [String]

  """
  Discount excl. VAT
  """
  discountExVat: Decimal!

  """
  Discount incl. VAT
  """
  discountIncVat: Decimal!

  """
  Item-value excl. VAT
  """
  itemValueExVat: Decimal!

  """
  Item-value incl. VAT
  """
  itemValueIncVat: Decimal!

  """
  Order excl. VAT
  """
  orderValueExVat: Decimal!

  """
  Order incl. VAT
  """
  orderValueIncVat: Decimal!

  """
  Payment excl. VAT
  """
  paymentFeeExVat: Decimal!

  """
  Payment incl. VAT
  """
  paymentFeeIncVat: Decimal!

  """
  Shipping excl. VAT
  """
  shippingFeeExVat: Decimal!

  """
  Shipping incl. VAT
  """
  shippingFeeIncVat: Decimal!

  """
  Order sum
  """
  sum: Decimal!

  """
  Order rows
  """
  rows: [CheckoutOrderRowType]

  """
  Market ID.
  """
  marketId: String!
}

type CheckoutOrderRowType {
  """
  Article number
  """
  articleNumber: String

  """
  Brand name
  """
  brand: String

  """
  Categories
  """
  categories: [String]

  """
  Campaign IDs
  """
  campaignIds: [String]

  """
  Campaign names
  """
  campaignNames: [String]

  """
  Discount excl. VAT
  """
  discountExVat: Decimal!

  """
  Discount incl. VAT
  """
  discountIncVat: Decimal!

  """
  Discount rate
  """
  discountRate: Float!

  """
  ExternalId
  """
  externalId: String

  """
  GTIN
  """
  gtin: String

  """
  Product image URL
  """
  imageUrl: String

  """
  Height
  """
  height: Int!

  """
  Length
  """
  length: Int!

  """
  Width
  """
  width: Int!

  """
  Weight
  """
  weight: Int!

  """
  Message
  """
  message: String

  """
  Name
  """
  name: String

  """
  Quantity
  """
  quantity: Int!

  """
  SKU
  """
  sku: String

  """
  Variant
  """
  variant: String

  """
  Price excl. VAT
  """
  priceExVat: Decimal!

  """
  Price incl. VAT
  """
  priceIncVat: Decimal!

  """
  ProductId
  """
  productId: Int!

  """
  ProductUrl
  """
  productUrl: String

  """
  ProductPriceCampaignId
  """
  productPriceCampaignId: Int

  """
  Product price list ID
  """
  productPriceListId: Int
}

type CheckoutDataType {
  """
  HTML-snippet
  """
  htmlSnippet: String

  """
  True if this is a new checkout session
  """
  newCheckoutSession: Boolean!

  """
  Indicates if the purchase has been completed. This may not be available for all payment types
  """
  completed: Boolean

  """
  Order details
  """
  order: CheckoutOrderType

  """
  The total number of purchases that the customer has done including this one
  """
  nthPurchase: Int!

  """
  The order details represented as a cart object.
  """
  cart: CartType
}

"""
Type containing page information
"""
type PageInfoType {
  """
  Page ID
  """
  id: Int!

  """
  Alias
  """
  alias: String!

  """
  Full path to the page
  """
  canonicalUrl: String

  """
  Alternative full paths to the page
  """
  alternativeCanonicalUrls: [String] @deprecated(reason: "Use AlternativeUrls instead.")

  """
  Alternative urls to the page
  """
  alternativeUrls: [AlternativeUrlType]

  """
  Background image
  """
  backgroundImage: String

  """
  Logo
  """
  logo: String

  """
  Name
  """
  name: String!

  """
  Whether the Name-field should be hidden
  """
  hideTitle: Boolean!

  """
  Whether the descriptions should be hidden
  """
  hideDescription: Boolean!

  """
  Primary description
  """
  primaryDescription: String

  """
  Primary image
  """
  primaryImage: String

  """
  Secondary description
  """
  secondaryDescription: String

  """
  Page metadata
  """
  meta: MetadataType

  """
  Page sub-categories
  """
  subCategories: [CategoryType]
}

"""
Type containing CMS page information
"""
type PageWidgetPageType {
  """
  Collection ID
  """
  id: Int!

  """
  Name
  """
  name: String!

  """
  Title
  """
  title: String

  """
  Alias
  """
  alias: String

  """
  Active From
  """
  activeFrom: DateTime

  """
  Active To
  """
  activeTo: DateTime

  """
  List of tags
  """
  tags: [String]

  """
  Collection metadata
  """
  meta: MetadataType

  """
  The url to this cms page
  """
  canonicalUrl: String
}

"""
Type containing widget collection information
"""
type PageWidgetCollectionType {
  """
  Collection ID
  """
  id: Int!

  """
  Name
  """
  name: String!

  """
  Title
  """
  title: String

  """
  Collection family name
  """
  familyName: String

  """
  List of tags
  """
  tags: [String]

  """
  Collection metadata
  """
  meta: MetadataType

  """
  Collection page area
  """
  pageArea: PageAreaType

  """
  Collection containers
  """
  containers: [PageWidgetContainerType]
}

"""
Type containing widget page area information
"""
type PageAreaType {
  """
  ID
  """
  id: Int!

  """
  Name
  """
  name: String

  """
  Index
  """
  index: Int!
}

"""
Type containing widget container information
"""
type PageWidgetContainerType {
  """
  ID
  """
  id: Int!

  """
  Name
  """
  name: String!

  """
  Sort order
  """
  sortOrder: Int!

  """
  Widgets in this container
  """
  widgets: [PageWidgetType]

  """
  Container class names
  """
  classNames: [String]

  """
  Container layout
  """
  layout: String!

  """
  Container responsive mode
  """
  responsiveMode: String!

  """
  Container design
  """
  design: String!
}

"""
Type containing widget information
"""
type PageWidgetType {
  """
  ID
  """
  id: String!

  """
  Name
  """
  name: String!

  """
  Sort order
  """
  sortOrder: Int!

  """
  Widget Type
  """
  type: String!

  """
  Size
  """
  size: String!

  """
  Class names
  """
  classNames: [String]

  """
  Images
  """
  images: [PageWidgetImageType]

  """
  Configuration
  """
  configuration: String!
}

"""
Type containing widget image information
"""
type PageWidgetImageType {
  """
  Filename
  """
  fileName: String!

  """
  Largest image size
  """
  largestSize: PageWidgetImageSizeType

  """
  Image sizes
  """
  sizes: [PageWidgetImageSizeType]
}

"""
Type containing widget image size information
"""
type PageWidgetImageSizeType {
  """
  Image width
  """
  imageWidth: Int!

  """
  Image height
  """
  imageHeight: Int!

  """
  Image ratio
  """
  imageRatio: Float!
}

"""
Customer type
"""
enum CustomerType {
  """
  Private person
  """
  PERSON

  """
  Organization
  """
  ORGANIZATION
}

"""
Type for filtering widgets
"""
input PageWidgetCollectionFilterInputType {
  """
  Filter key
  """
  key: String

  """
  Filter value
  """
  value: String
}

type OrderType {
  id: Int
  customerId: Int
  createdAt: DateTime
  completedAt: DateTime
  currency: String
  desiredDeliveryDate: DateTime
  message: String
  status: String!
  updatedAt: DateTime
  publicId: ID!
  billingAddress: AddressType
  shippingAddress: AddressType
  cart: CartType
  paymentDetails: [PaymentDetailsType]
  discount: PriceType
  orderTotal: PriceType
  paymentFee: PriceType
  shippingFee: PriceType
  vat: PriceType

  """
  The amount taken from account balance
  """
  fromBalance: Decimal!

  """
  The amount taken from account balance. Formatted as a currency string.
  """
  fromBalanceFormatted: String
  refunds: [RefundType]
  shippingDetails: [ShippingDetailType]
}

type AddressType {
  firstName: String!
  lastName: String!
  addressLine1: String!
  addressLine2: String!
  addressLine3: String!
  entryCode: String!
  careOf: String!
  city: String!
  state: String!
  country: String!
  zip: String!
  company: String!
  mobile: String!
  phone: String!
}

type PaymentDetailsType {
  id: Int!
  paymentId: Int!
  transactionId: String!
  displayName: String!
  name: String!
  isPaid: Boolean!
  paymentDate: DateTime
  paymentFee: Float!
  paymentOption: String
  reservationDate: DateTime!
  reservationNumber: String
  shippingFee: Float!
  total: Float!
}

type RefundType {
  id: Int!
  itemId: Int!
  articleNumber: String
  createdAt: DateTime!
  reason: String
  reasonCode: Int
  refundType: String
  toBalance: Boolean!
  total: Float!
  vat: Float!
}

type ShippingDetailType {
  id: Int!
  name: String!
  parcelNumber: String
  shippingDate: DateTime
  shippingId: Int!
  trackingLink: String
}

scalar Guid

type UserType {
  id: Int!
  email: String!
  address: AddressType
  gender: Gender
  customerType: CustomerType
  newsletter: Boolean
  personalId: String
  memberType: String!
  memberId: Int!

  """
  User balance per currency
  """
  balances: [UserBalanceType]

  """
  Account balance
  """
  balance: Decimal! @deprecated(reason: "Use Balances instead")

  """
  Account balance. Formatted as a currency string.
  """
  balanceFormatted: String @deprecated(reason: "Use Balances instead")

  """
  Free-text field that can contain any additional metadata related to the customer.
  """
  metaData: String
}

enum Gender {
  UNSPECIFIED
  WOMAN
  MAN
}

type UserBalanceType {
  currency: String!
  amount: Decimal!

  """
  User balance amount. Formatted as a currency string.
  """
  amountFormatted: String
}

type UrlHistoryType {
  oldUrl: String!
  newUrl: String!
}

type MenuType {
  id: String!
  name: String
  title: String
  locations: [String]
  channels: [String]
  languages: [String]
  menuItems: [MenuItemType]
}

type MenuItemType {
  id: String!
  label: String
  targetBlank: Boolean!
  type: String!
  order: Int!
  value: String
  open: Boolean!
  hidden: Boolean!
  title: String
  canonicalUrl: String
  children: [MenuItemType]
}

"""
The results of the reviews query.
"""
type ProductReviewResultType {
  """
  The total count of results for the query
  """
  count: Long!

  """
  The average rating for this product
  """
  averageRating: Float!

  """
  Results returned by the query
  """
  reviews: [ProductReviewType]
}

"""
Type containing all information about a product review
"""
type ProductReviewType {
  """
  The product rating (1-5)
  """
  rating: Int!

  """
  The product review comment
  """
  comment: String!

  """
  The date and time for when the review was made
  """
  reviewDate: DateTime!

  """
  Author of the review
  """
  author: String!
}

type ValidateOrderConditionsResponseType {
  isValid: Boolean!
  message: String
}

type ValidateOrderCreationResponseType {
  isValid: Boolean!
  message: String
  memberType: String
}

input CheckoutInputType {
  paymentId: Int
  shippingId: Int
  externalShippingId: String
  pickupPoint: String
  desiredDeliveryDate: DateTime
  message: String
  acceptedConsents: [String]
  shippingAddress: AddressInputType
  billingAddress: AddressInputType
  identityNumber: String
  email: String
  customerType: CustomerType
  externalShippingFee: Decimal
  merchantData: String
}

input AddressInputType {
  firstName: String
  lastName: String
  addressLine1: String
  addressLine2: String
  addressLine3: String
  entryCode: String
  careOf: String
  city: String
  state: String
  country: String
  zip: String
  company: String
  mobile: String
  phone: String
}

type Mutation {
  addToCart(
    """
    The cart ID
    """
    id: String!

    #
    item: CartItemInputType!

    """
    If the the shipping fee on cart is allowed to take the value of an external shipping. Set to false if outside checkout.
    """
    allowExternalShippingFee: Boolean

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): CartType
  addPackageToCart(
    """
    The cart ID
    """
    id: String!

    """
    The product id of the package
    """
    packageId: Int!

    """
    If the the shipping fee on cart is allowed to take the value of an external shipping. Set to false if outside checkout.
    """
    allowExternalShippingFee: Boolean

    """
    All option selections for the package
    """
    selections: [ProductPackageSelectionType]

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): CartType

  """
  Update the cart item
  """
  updateCartItem(
    """
    The cart ID
    """
    id: String!

    """
    The item to be updated
    """
    item: CartItemInputType!

    """
    If the the shipping fee on cart is allowed to take the value of an external shipping. Set to false if outside checkout.
    """
    allowExternalShippingFee: Boolean

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): CartType

  """
  Update the quantity of an entire cart group
  """
  updateCartGroup(
    """
    The cart ID
    """
    id: String!

    """
    The group key to be updated
    """
    item: CartGroupInputType!

    """
    If the the shipping fee on cart is allowed to take the value of an external shipping. Set to false if outside checkout.
    """
    allowExternalShippingFee: Boolean

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): CartType

  """
  Marks the cart as completed, and makes it read-only
  """
  completeCart(
    """
    The cart ID
    """
    id: String!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): CartType

  """
  Set a promo code on the cart
  """
  setCartPromoCode(
    """
    The cart ID
    """
    id: String!

    """
    The promo code to store on cart
    """
    promoCode: String!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): CartType
  createOrUpdateCheckout(
    """
    The cart ID
    """
    cartId: String!

    """
    The choices made in checkout
    """
    checkout: CheckoutInputType

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): CheckoutType
  placeOrder(
    """
    The cart ID
    """
    cartId: String!

    """
    The choices made in checkout
    """
    checkout: CheckoutInputType!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): PlaceOrderResponseType
  updateUser(
    """
    The user fields to update. Omitted fields or fields with null values will not be updated.
    """
    user: UserInputType!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): UserType
  requestPasswordReset(
    #
    email: String!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): Boolean
  commitReset(
    #
    resetKey: String!

    #
    password: String!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): Boolean
  deleteUser(
    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): Boolean
  subscribeToNewsletter(
    """
    The subscribing email adress.
    """
    email: String!

    """
    Custom tags that are sent along with the email to the newsletter provider.
    """
    tags: [String]

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): Boolean
  monitorProductAvailability(
    #
    email: String!

    #
    skuId: Int!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): Boolean
  postProductReview(
    """
    Product alias
    """
    alias: String!

    """
    Rating, 1-5
    """
    rating: Int

    """
    The review comment
    """
    comment: String

    """
    Name of author
    """
    author: String!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): Boolean
  setCartShippingFee(
    """
    The cart ID
    """
    cartId: String!

    """
    The shipping fee
    """
    shippingFee: Decimal!

    """
    The channel ID. Will default to an existing value if it is not found.
    """
    channelId: String

    """
    The language ID. Will default to an existing value if it is not found.
    """
    languageId: String

    """
    The market ID. Will default to an existing value if it is not found.
    """
    marketId: String
  ): CheckoutType
}

input CartItemInputType {
  skuId: Int
  id: ID
  quantity: Int!
  groupKey: ID
  message: String
}

"""
Type containing an option selection for a product package group
"""
input ProductPackageSelectionType {
  """
  The group id that the selection is made in
  """
  groupId: Int!

  """
  The selected option id
  """
  optionId: Int!

  """
  The selected SKU
  """
  skuId: Int!
}

input CartGroupInputType {
  groupKey: ID
  quantity: Int!
}

type CheckoutType {
  email: String
  identityNumber: String
  cart: CartType
  billingAddress: AddressType
  shippingAddress: AddressType
  consents: [ConsentType]
  paymentOptions: [PaymentOptionType]
  shippingOptions: [ShippingOptionType]
  shippingData: String
  checkoutStatus: CheckoutStatus
}

type ConsentType {
  type: String!
  name: String!
  description: String!
  checked: Boolean!
  autoAccept: Boolean!
}

enum CheckoutStatus {
  OK
  CUSTOMER_BLACKLISTED
}

type PlaceOrderResponseType {
  orderId: String
  status: String
  redirectUrl: String
}

input UserInputType {
  address: AddressInputType
  gender: Gender
  newsletter: Boolean
  personalId: String
  customerType: CustomerType = PERSON

  """
  Free-text field to store any data related to the customer.
  """
  metaData: String
}
